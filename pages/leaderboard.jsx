import Head from 'next/head';

import { dehydrate, QueryClient } from '@tanstack/react-query';
import { fetchUsers } from '@/lib/api-functions/server/users/queries';
import { STORAGE_KEY } from '@/lib/tq/users/settings';

import Layout from '@/components/Layout';
import Heading from '@/components/Heading';
import QueryBoundaries from '@/components/QueryBoundaries';

import Table from '@/components/Table';
// import { Query } from 'mongoose';

export default function Leaderboard() {
  const columns = [
    { field: 'id', headerName: 'Ranking', width: 100 },
    { field: 'nickname', headerName: 'Name', width: 200 },
    { field: 'totalGuesses', headerName: 'Total guesses', width: 130 },
    { field: 'correctGuesses', headerName: 'Correct guesses', width: 130 },
    { field: 'accuracy', headerName: 'Success rate', width: 130 },
    { field: 'points', headerName: 'Points', width: 200 },
  ];

  return (
    <>
      <Head>
        <title>NBA Guesses</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <Heading>Leaderboard</Heading>
        <QueryBoundaries>
          <Table columns={columns} />
        </QueryBoundaries>
      </Layout>
    </>
  );
}

export async function getStaticProps(context) {
  try {
    const users = await fetchUsers();
    const queryClient = new QueryClient();

    await queryClient.setQueryData(
      [STORAGE_KEY],
      JSON.parse(JSON.stringify(users)),
    );

    return {
      props: {
        dehydratedState: dehydrate(queryClient),
      },
    };
  } catch (err) {
    console.log(err);
    return {
      props: {
        error: err.message,
      },
    };
  }
}
